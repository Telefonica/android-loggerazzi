task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    repositories {
        maven {
            credentials {
                username System.env.NEXUS_USER
                password System.env.NEXUS_PASS
            }
            url "https://nexusng.tuenti.io/repository/maven-release-private/"
        }
    }
    publications {
        release(MavenPublication) {
            groupId 'com.telefonica'
            artifactId 'loggerazzi'
            version version

            artifact("$buildDir/outputs/aar/loggerazzi-release.aar")
            artifact androidSourcesJar

            pom {
                name = 'Android Loggerazzi'
                description = 'Logs snapshot testing for Android Instrumentation tests.'
                url = 'https://github.com/Telefonica/android-loggerazzi'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'android-team-telefonica'
                        name = 'Android Team'
                        email = 'cto-android@telefonica.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/Telefonica/android-loggerazzi.git'
                    developerConnection = 'scm:git:ssh://github.com/Telefonica/android-loggerazzi.git'
                    url = 'https://github.com/Telefonica/android-loggerazzi/tree/main'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.getByName("implementation").allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

afterEvaluate {
    tasks.getByName("publishReleasePublicationToMavenLocal").dependsOn("assembleRelease")
    tasks.getByName("publishReleasePublicationToSonatypeRepository").dependsOn("assembleRelease")
    tasks.getByName("signReleasePublication").dependsOn("assembleRelease")
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications
}